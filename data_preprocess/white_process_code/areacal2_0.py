# -*- coding: utf-8 -*-
"""AreaCal2.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yJakCmHBDqedTP4yZ3HSfsMoKhLgdyxG
"""



import numpy as np
import cv2 
import os
# import matplotlib.pyplot as plt
# from skimage.measure import label

def Filtrate1(img):
  #first filtrate: 黑色背景占比<=0.85的
  #gray and binary
  if len(img.shape) == 3 and img.shape[2] == 3:
    imgray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  else:
    imgray = img
  ret, thresh = cv2.threshold(imgray, 127, 255, 0)

  #calculate connect comopnents
  num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(thresh, connectivity=8)
  #print("num_labels:",num_labels)

  zero_area = stats[0][-1]
  list_proportion =list()
  areas = list()
  for i in range(num_labels):
      areas.append(stats[i][-1])

  area_sum = np.sum(areas[0:-1])

  proportion = zero_area / area_sum
  if(proportion <= 0.85): 
    return True
  else:
    return False

def Filtrate2(img):
  # coor = np.where(img > 10)
  # (array([10,11]),array([100,101]))
  # min_x, max_x = min(coor[0]), max(coor[0])
  # min_y, max_y = min(coor[1]), max(coor[1])
  # area = len(np.where(img> 10)[0])
  #opening
  kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
  open_img = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)

  #gray and binary
  # imgray = cv2.cvtColor(open_img, cv2.COLOR_BGR2GRAY)
  if len(open_img.shape) == 3 and open_img.shape[2] == 3:
    imgray = cv2.cvtColor(open_img, cv2.COLOR_BGR2GRAY)
  else:
    imgray = open_img
  ret, thresh = cv2.threshold(imgray, 127, 255, 0)

  #calculate connect comopnents
  num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(thresh, connectivity=8)
  #print("num_labels:",num_labels)


  #find contours
  contours, hierarchy = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
  #cv2.drawContours(img,contours,-1,(0,0,255),3)
  #print(len(contours))

  #find the biggest contours and calculate it's area

  biggest_area = cv2.contourArea(contours[0])
  biggest_index = 0
  for i in range(len(contours)):
    cnt = contours[i]
    area = cv2.contourArea(cnt)
    if(area > biggest_area):
      biggest_area = area
      biggest_index = i


  #outside rectangle
  x, y, w, h = cv2.boundingRect(contours[biggest_index])
  rect_area = w * h
  #proportion of the biggest area and rectangle area
  proportion = float(biggest_area)/rect_area
  
  if proportion > 0.6: 
    return True
  
  else:
    return False

def open(img):
  kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
  open_img = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)
  return open_img

def Filtrate3(img):
  #after open，calculate the total number of components
  kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
  open_img = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)
  # imgray = cv2.cvtColor(open_img, cv2.COLOR_BGR2GRAY)
  if len(open_img.shape) == 3 and open_img.shape[2] == 3:
    imgray = cv2.cvtColor(open_img, cv2.COLOR_BGR2GRAY)
  else:
    imgray = open_img
  ret, thresh = cv2.threshold(imgray, 127, 255, 0)
  #calculate connect comopnents
  num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(thresh, connectivity=8)
  flag = 0
  if num_labels <= 4:
    flag = 1
    return thresh, flag
  else:
    flag = 0
    return thresh, flag

# path = '/home/kangjuan/expand/project_backup/HR-VITON/data/stylepedia_choose_cloth_20221116/test/cloth-mask/neckline_round_neck' # Source Folder
# dstpath = '/home/kangjuan/expand/project_backup/HR-VITON/data/stylepedia_choose_cloth_20221116/test/res25_cloth-mask/neckline_round_neck' # Destination Folder
#
# if not os.path.exists(dstpath):   # create path if the path is not exit
#     os.makedirs(dstpath)
# files = os.listdir(path)
#
# for image in files:
#   print(image)
#   img = cv2.imread(os.path.join(path,image))
#   filtrate1 = Filtrate1(img)
#   filtrate2 = Filtrate2(img)
#   res_img, filtrate3 = Filtrate3(img)
#   if ((filtrate1 & filtrate2)|filtrate3):
#     cv2.imwrite(os.path.join(dstpath, image), res_img)

def filter_process_mask(mask):
  filtrate1 = Filtrate1(mask)
  filtrate2 = Filtrate2(mask)
  res_img, filtrate3 = Filtrate3(mask)
  is_valid = False
  if ((filtrate1 & filtrate2)|filtrate3):
    is_valid = True
  return is_valid,res_img